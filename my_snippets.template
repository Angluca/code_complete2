"==================================================
" File:         my_snippets.template
" Brief:        the template file of the code_templete.vim script
" Author:       Mingbai <mbbill AT gmail DOT com>, 
"               StarWing <weasley_wx AT qq DOT com>
"
" Last Change:  2008-11-06 18:38:25
" Version:      2.8
"" Example: {{{
"   some new file type
"   let g:template['newft'] = {}
"   let g:template['newft']['keyword'] = "some abbrevation"
"   let g:template['newft']['anotherkeyword'] = "another abbrevation"
"
"   you can add common template with adding items to g:template['_']
" }}}
"==================================================
" must loaded code_complete.vim {{{1
if !exists('g:loaded_code_complete')
    finish
endif
"}}}

" some helper to build the templates {{{1
" define the region of template
func! s:sr(text)
    return g:rs . a:text . g:re
endfunc

" default region
let s:dr = s:sr('...')

" check whether we have g:template
if !exists('g:template')
    let g:template = {}
endif
" }}}
" set common template {{{1
let g:template['_'] = {}
let g:template['_']['dt'] = "\<c-r>=strftime('%Y-%m-%d')\<cr>"
let g:template['_']['xt'] = "\<c-r>=strftime(\"%Y-%m-%d %H:%M:%S\")\<cr>"

" }}}
" set the template for C and C++ {{{1
" template['c'] is same as template['cpp']
" you can only use a ref points to filetype c
let g:template['c'] = {}

let g:template['c']['co'] = "/*  */\<left>\<left>\<left>"

let g:template['c']['cc'] = "/**<  */\<left>\<left>\<left>"

let g:template['c']['df'] = "#define "

let g:template['c']['ic'] = "#include \"\"\<left>"

let g:template['c']['ii'] = "#include <>\<left>"

let g:template['c']['ff'] = "#ifndef \<c-r>=GetFileName()\<cr>".
            \ "\<CR>#define \<c-r>=GetFileName()\<cr>".
            \ repeat("\<cr>",5)."#endif  /* \<c-r>=GetFileName()\<cr> */".
            \ repeat("\<up>",3)

let g:template['c']['bc'] = "/***********************************".
            \ "***********************\\\<cr>".s:dr."\<cr>\<bs>".
            \ "\<bs>\<bs>\\************************************".
            \ "**********************/\<cr>"

let g:template['c']['for'] = "for (".s:dr."; ".s:dr.
            \ "; ".s:dr.")\<cr>{\<cr>".s:dr."\<cr>}\<cr>"

let g:template['c']['main'] = "int main(int argc, char \*argv\[\])".
            \ "\<cr>{\<cr>".s:dr."\<cr>}"

let g:template['c']['switch'] = "switch (".s:dr.")\<cr>"
            \ "{\<cr>case ".s:dr.":\<cr>break;\<cr>case ".
            \ s:dr.":\<cr>break;\<cr>default:\<cr>".
            \ s:dr."\<cr>break;\<cr>}"

let g:template['c']['if'] = "if (".s:dr.")\<cr>{\<cr>".s:dr."\<cr>}"

let g:template['c']['while'] = "while (".s:dr.")\<cr>{\<cr>".s:dr."\<cr>}"

let g:template['c']['ife'] = "if (".s:dr.")\<cr>{\<cr>".
            \ s:dr."\<cr>} else\<cr>{\<cr>".s:dr."\<cr>}"

let g:template['c']['do'] = "do\<cr>{\<cr>".s:dr.
            \ "\<cr>}\<cr>while (".s:dr.");\<cr>"

let g:template['c']['struct'] = "struct ".s:dr."\<cr>{\<cr>".
            \ s:dr."\<cr>};\<cr>"

let g:template['c']['ts'] = "typedef struct ".s:dr."\<cr>{\<cr>".
            \ s:dr."\<cr>} ".s:dr.";\<cr>"

let g:template['cpp'] = g:template['c']

" }}}
" set the template for vim script file {{{
let g:template['vim'] = {}
let g:template['vim']['func'] = "\" ".s:dr." {{{\<cr>\<cr>\<bs>\<bs>function! ".
            \ s:dr."\<cr>".s:dr."\<cr>endfunc\<cr>\" }}}\<cr>"
" }}}
" vim: ft=vim:fdm=marker:co=84:ts=4:sts=4:sw=4:nu:et:sta:ai
