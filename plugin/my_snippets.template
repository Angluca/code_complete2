"=============================================================================
" File:             my_snippets.template
" Brief:            the complete file of the code_complete.vim script
" Original Author:  Mingbai <mbbill AT gmail DOT com> 
" Maintainer:       StarWing <weasley_wx AT qq DOT com>
" Last Change:      2008-11-07 18:22:31
" Version:          2.9
" Example: {{{1
"           some new file type, e.g. 'newft'
"           first define a function named
"           Set_complete_type_newft, the second argument is
"           template file-list of newft, create by
"           code_complete automatically
"
"           function! Set_complete_type_newft(dict, ...)
"               " then, add filetype-spec complete list in
"               this function
"               let a:dict['hello'] = "Hello, ".
"                           \ MakeRegion('your name')." !"
"           endfunction
"
"           you can use some redefined helper function and
"           variables.  e.g. let a:dict['cool'] = "Oh!! it's
"           ".s:sr('cool')."!!!\<cr>" \<cr> means 'enter' or
"           'return' button on your keyboard
"
"           you can add common template with adding items
"           into the function Set_complete_type_COMMON, it
"           will be called each UpdateTemplate command
"           called.
" }}}
" ============================================================================
" Must have loaded code_complete {{{1
if !exists('g:loaded_code_complete')
    finish
endif
" }}}
" ----------------------------------------------------------------------------
" some helper {{{1

if !exists('s:sr')
    let s:sr = function('MakeRegion')
endif
let s:dr = s:sr('...')

let g:CodeCompl_complete_type_lists = ['COMMON', 'c', 'cpp', 'vim']

" }}}
" set common Complete {{{1

function! Set_complete_type_COMMON(dict, ...)
    let a:dict['dt'] = "\<c-r>=strftime('%Y-%m-%d')\<cr>"
    let a:dict['xt'] = "\<c-r>=strftime('%Y-%m-%d %H:%M:%S')\<cr>"
endfunction

" }}}
" set the template for C and C++ {{{1

function! Set_complete_type_c(dict, ...)
    let a:dict['df'] = "#define "
    let a:dict['ic'] = "#include \"\"\<left>"
    let a:dict['ii'] = "#include <>\<left>"
    let a:dict['ff'] = "#ifndef \<c-r>=GetFileName()\<cr>".
                \ "\<CR>#define \<c-r>=GetFileName()\<cr>".
                \ repeat("\<cr>",5)."#endif  /* \<c-r>=GetFileName()".
                \ "\<cr>*/\<cr>".repeat("\<up>",4)

    let a:dict['co'] = "/*  */\<left>\<left>\<left>"
    let a:dict['cc'] = "/**<  */\<left>\<left>\<left>"
    let a:dict['cb'] = "/*********************************************\<cr>"
    let a:dict['ce'] = "<BS>*******************************************/"

    let a:dict['bc'] = "/***********************************".
                \ "***********************\\\<cr>".s:sr('Commets').
                \ "\<cr>\<bs>\<bs>\<bs>\\************************".
                \ "**********************************/\<cr>"

    let a:dict['main'] = "int main(int argc, char \*argv\[\])".
                \ "\<cr>{\<cr>".s:sr('Write Code Here!')."\<cr>\<bs>return 0;".
                \ "\<cr>}\<cr>"

    let a:dict['if'] = "if (".s:dr.")\<cr>{\<cr>".s:dr."\<cr>}\<cr>".s:dr
    let a:dict['else'] = "else\<cr>{\<cr>".s:dr."\<cr>}\<cr>".s:dr
    let a:dict['while'] = "while (".s:dr.")\<cr>{\<cr>".s:dr."\<cr>}\<cr>".s:dr
    let a:dict['do'] = "do\<cr>{\<cr>".s:dr."\<cr>}\<cr>while (".
                \ s:dr.");\<cr>".s:dr
    let a:dict['for'] = "for (".s:dr."; ".s:dr."; ".s:dr.")\<cr>{\<cr>".
                \ s:dr."\<cr>}\<cr>".s:dr
    let a:dict['case'] = "case ".s:dr.":\<cr>".s:dr."\<cr>\<bs>break;".
                \ "\<cr>\<bs>".s:dr
    let a:dict['switch'] = "switch (".s:dr.")\<cr>{\<cr>\<bs>".a:dict['case'].
                \ "\<cr>\<bs>default:\<cr>".s:dr."\<cr>}\<cr>".s:dr
    let a:dict['struct'] = "struct ".s:dr."\<cr>{\<cr>".s:dr."\<cr>}".s:sr(';')
endfunction

function! Set_complete_type_cpp(dict, fdict)
	call Set_complete_type_c(a:dict)

    " add C templates
    for fname in split(globpath(&rtp, g:CodeCompl_Template_Folder.'/*.c'))
        let l:key = fnamemodify(fname, ':t:r')
        if !has_key(a:fdict, l:key)
            let a:fdict[l:key] = fname
        endif
    endfor
endfunction

" }}}
" set the template for vim script file {{{1

function! Set_complete_type_vim(dict, ...)
    let a:dict['func'] = "\" ".s:dr." \{\{\{\<cr>\<cr>\<bs>\<bs>function! ".
                \ s:dr."\<cr>".s:dr."\<cr>endfunction\<cr>\" \}\}\}"
endfunction

" }}}
" vim: ft=vim:fdm=marker:co=84:ts=4:sts=4:sw=4:nu:et:sta:ai
